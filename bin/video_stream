#!/usr/bin/python3

from flask import Flask, Response
import time
import os

try:
    import blupants_client
except:
    import blupants.blupants_client as blupants_client


global robot_id
robot_id = 0

if "robot_id" in blupants_client.config:
    robot_id = blupants_client.config["robot_id"]

global use_opencv
use_opencv = False

if "use_opencv" in blupants_client.config:
    use_opencv = blupants_client.config["use_opencv"]

img_path = "/tmp/blupants/t.png"
shutdown_file = "/tmp/blupants/shutdown"


app = Flask(__name__)

if use_opencv:
    import cv2
    if robot_id == 0 or robot_id == 1:
        global video
        video = cv2.VideoCapture(0)

    if robot_id == 4:
        global camera
        import imutils
        from picamera.array import PiRGBArray
        from picamera import PiCamera
        camera = PiCamera()


def gen():

    if robot_id == 4:
        global camera
        camera.resolution = (320, 240)
        camera.framerate = 32
        rawCapture = PiRGBArray(camera, size=(320, 240))
        """Video streaming generator function."""
        for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
            # grab the raw NumPy array representing the image, then initialize the t
            image = frame.array
            image = imutils.rotate_bound(image, 180)
            cv2.imwrite(img_path, image)
            yield b'--frame\r\nContent-Type: image/png\r\n\r\n' + open(img_path, 'rb').read() + b'\r\n'
            time.sleep(0.3)
            rawCapture.truncate(0)
            time.sleep(0.3)
            if os.path.isfile(shutdown_file):
                break

    if robot_id == 0 or robot_id == 1:
        global video
        if video.isOpened():
            video.set(cv2.CAP_PROP_FPS, 1)
            video.set(cv2.CAP_PROP_FRAME_WIDTH, 320)
            video.set(cv2.CAP_PROP_FRAME_HEIGHT, 240)
            time.sleep(1)
        """Video streaming generator function."""
        while True:
            rval, frame = video.read()
            cv2.imwrite(img_path, frame)
            yield b'--frame\r\nContent-Type: image/png\r\n\r\n' + open(img_path, 'rb').read() + b'\r\n'
            time.sleep(0.5)
            if os.path.isfile(shutdown_file):
                break
        video.release()

    print("Finished streaming.")
    cmd = "rm {}".format(shutdown_file)
    os.system(cmd)
    time.sleep(1)


def _bluetooth_start():
    try:
        if "bluetooth_addr" in blupants_client.config:
            bluetooth_addr = blupants_client.config["bluetooth_addr"]
            if len(bluetooth_addr) == 0:
                return
            cmd = "echo agent on | bluetoothctl"
            os.system(cmd)
            cmd = "echo default-agent | bluetoothctl"
            os.system(cmd)
            cmd = "echo pair {} | bluetoothctl".format(bluetooth_addr)
            os.system(cmd)
            cmd = "echo connect {} | bluetoothctl".format(bluetooth_addr)
            os.system(cmd)
            cmd = "echo trust {} | bluetoothctl".format(bluetooth_addr)
            os.system(cmd)

            cmd = "LANG=C pulseaudio -vvvv --log-time=1 -D --system --disallow-exit --disable-shm"
            os.system(cmd)
            cmd = "pactl load-module module-bluetooth-policy"
            os.system(cmd)
            cmd = "pactl load-module module-bluetooth-discover"
            os.system(cmd)
            cmd = "echo connect {} | bluetoothctl".format(bluetooth_addr)
            os.system(cmd)

            cmd = "pactl list sinks > /tmp/blupants/sinks"
            os.system(cmd)

            time.sleep(3)

            with open("/tmp/blupants/sinks", "r") as f:
                for line in f.readlines():
                    if line.lower().find("name: ") != -1:
                        tmp = line.split(": ")
                        if len(tmp) > 1:
                            sink = tmp[1]
                            sink = sink.replace("\n", "")
                            cmd = "pactl set-default-sink {}".format(sink)
                            os.system(cmd)
                            return
    except:
        pass


@app.route('/')
def video_feed():
    """Video streaming route. Put this in the src attribute of an img tag."""
    return Response(gen(), mimetype='multipart/x-mixed-replace; boundary=frame')


if __name__ == '__main__':
    if robot_id == 0 or robot_id == 1:
        _bluetooth_start()
    if use_opencv:
        #app.run(host='0.0.0.0', debug=True, threaded=True)
        app.run(host='0.0.0.0', port="8081")
    else:
        cmd = "/usr/bin/motion"
        os.system(cmd)
